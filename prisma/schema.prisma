// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Определение модели заявки
model Appointment {
  id          Int       @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  service     Service  @relation(fields: [serviceId], references: [id])
  serviceId   Int
  date        DateTime
  status      String    // 'ожидание', 'подтвержденно', 'отклонено'
}

// Определение модели пользователя
model User {
  id           Int           @id @default(autoincrement())
  username     String
  email        String        @unique
  password     String
  role         String        // 'user' or 'manager'
  phone        String        @unique
  reviews      Review[]
  appointments Appointment[]
  // Обратное отношение к услугам, которые добавлены этим пользователем
  services     Service[]     @relation("ManagerServices")
}

// Определение модели услуги
model Service {
  id          Int        @id @default(autoincrement())
  title       String
  description String
  price       Float
  photo       String
  manager     User      @relation(fields: [managerId], references: [id], name: "ManagerServices")
  managerId   Int
  reviews     Review[]
  appointments Appointment[]
}

// Определение модели отзыва
model Review {
  id         Int      @id @default(autoincrement())
  content    String
  status     String  // 'ожидание', 'подтвержденно', 'отклонено'
  user       User    @relation(fields: [userId], references: [id])
  userId     Int
  service    Service @relation(fields: [serviceId], references: [id])
  serviceId  Int
}